"""
Django settings for cbri project.

Generated by 'django-admin startproject' using Django 2.0.2.

For more information on this file, see
https://docs.djangoproject.com/en/2.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/2.0/ref/settings/
"""

import datetime
import os

from cbri.configsetup import get_default_config_parser
from cbri.version import get_version

APP_VERSION_NUMBER = get_version()

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))

config = get_default_config_parser()
# TODO: non-hardcoded version?
config_file_dir = os.path.join(BASE_DIR, "local_settings.ini")
print("Using config file: " + config_file_dir) # Cannot use logger yet because it has not been created.
config.read(config_file_dir)

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/2.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
# SECURITY WARNING: don't run with debug turned on in production!

# XXX: This particular key should not be considered secret, as it is in the GitHub repo
DEV_INSECURE_KEY = 'ewiduv0+%_r9539k1ecr16258)z+3-eykww(4ipzl8kzh@e!*$'

# TODO: Consider having ADMIN_ENABLED as an independent part of the security-sensitive configuration
SECRET_KEY = config.get('Security', 'SecretKey', fallback=DEV_INSECURE_KEY)
DEBUG = config.getboolean('Security', 'Debug', fallback=True)

# Disable admin panel when DEBUG mode is disabled.
ADMIN_ENABLED = DEBUG

ALLOWED_HOSTS = []

if 'Hostnames' in config:
    # Converts the options of the Hostnames section into a list of strings.
    hostname_list = list(config['Hostnames'].keys())
    ALLOWED_HOSTS = hostname_list

CORS_ORIGIN_ALLOW_ALL = True
CORS_EXPOSE_HEADERS = ['Content-Disposition']
CORS_ORIGIN_WHITELIST = tuple(ALLOWED_HOSTS)

SECURE_CONTENT_TYPE_NOSNIFF = True
SECURE_BROWSER_XSS_FILTER = True
X_FRAME_OPTIONS = 'DENY'

# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'rest_framework',
    'django_bleach',
    'store.apps.StoreConfig',
    'corsheaders',
    'multi_email_field',
    'background_task',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'cbri.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates')]
        ,
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
                'cbri.context_processors.selected_settings',
            ],
        },
    },
]

WSGI_APPLICATION = 'cbri.wsgi.application'


# Database
# https://docs.djangoproject.com/en/2.0/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': os.path.join(BASE_DIR, 'cbri_database'),
    }
}

if 'DatabaseDefaults' in config:
    default_db_settings = dict(config['DatabaseDefaults'])
    DATABASES['default'] = default_db_settings

# SECURITY WARNING: Django Auth is disabled for testing.
ENABLE_AUTH = True

if ENABLE_AUTH:
    REST_FRAMEWORK = {
        'DEFAULT_PERMISSION_CLASSES': (
            'rest_framework.permissions.IsAuthenticated',
        ),
        'DEFAULT_AUTHENTICATION_CLASSES': (
            'rest_framework_jwt.authentication.JSONWebTokenAuthentication',
            'rest_framework.authentication.SessionAuthentication'
        ),
        'DEFAULT_RENDERER_CLASSES': (
            'rest_framework.renderers.JSONRenderer',
        ),
    }

JWT_AUTH = {
    'JWT_VERIFY_EXPIRATION': False
}

# Password validation
# https://docs.djangoproject.com/en/2.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/2.0/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/2.0/howto/static-files/

STATIC_URL = '/static/'

# When run using mod_wsgi-express, the root directory used to find STATIC_ROOT
# is not the system root but is instead where manage.py was run.
# Also, shell expansion is not done, so ~ is taken literally
STATIC_ROOT = "statictest/"

CBRI_SMTP = config.get('Reporting', 'SMTP')
CBRI_EMAIL = config.get('Reporting', 'EMAIL')
CBRI_PASSWORD = config.get('Reporting', 'PASSWORD')
CBRI_FRONT_END = config.get('Reporting', 'URL_BASE', fallback="http://localhost:4200")

SUPPORTED_LANGUAGES = ["Java", "C", "C#", "C++"]

# Logging
LOGGING_CONFIG = None
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'verbose': {
            'format': '{levelname} {asctime} {module} {message}',
            'style': '{',
        },
        'simple': {
            'format': '{levelname} {message}',
            'style': '{',
        },
    },
    'handlers': {
        'file': {
            'level': 'INFO',
            'class': 'logging.handlers.RotatingFileHandler',
            'filename': './cbri_backend.log',
            'formatter': 'verbose',
            'maxBytes': 5*1024*1024, # 5 MB
            'backupCount': 1, # 1 Backup
        },
        'console': {
            'class': 'logging.StreamHandler',
            'formatter': 'simple'
        },
    },
    'loggers': {
        'django': {
            'handlers': ['file', 'console'],
            'level': 'INFO',
            'propagate': True,
        },
        'cbri': {
            'handlers': ['file', 'console'],
            'level': 'INFO',
            'propagate': True,
        },
    },
}

import logging.config
logging.config.dictConfig(LOGGING)

#BACKGROUND_TASK
MAX_ATTEMPTS=1
MAX_RUN_TIME=3600